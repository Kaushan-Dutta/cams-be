// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  AGENCY
}
enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}
enum MessageType {
  PERSONAL
  BROADCAST
}
enum CaseStatus {
  PENDING
  CASE_ASSIGNED
  PROGRESS
  REJECTED
}

model Account {
  id       String  @id @default(uuid())
  email    String  @unique
  password String
  role     Role    @default(USER)
  agency   Agency?
  location Location?
  NotificationRecv Notification[] @relation("ReceivedNotifications")
  NotificationSent Notification[] @relation("SentNotifications")
  alert    Alert[]
}

model Agency {
  id        String   @id @default(uuid())
  name      String
  phone     String
  address   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  account   Account  @relation(fields: [accountId], references: [id])
  accountId String   @unique
}

model Location{
  id       String   @id @default(uuid())
  longitude Float
  latitude  Float
  account   Account  @relation(fields: [accountId], references: [id])
  accountId String   @unique
}

model AgencyApplication{
  id       String   @id @default(uuid())
  email    String
  name     String
  phone    String
  address  String
  document String
  status   ApplicationStatus   @default(PENDING)
}

model Notification {
  id         String      @id @default(uuid())
  title      String
  message    String
  createdAt  DateTime    @default(now())
  type       MessageType
  sender     Account     @relation("SentNotifications", fields: [senderId], references: [id])
  senderId   String
  receiver   Account?    @relation("ReceivedNotifications", fields: [receiverId], references: [id])
  receiverId String
}
model Evidence{
  id       String   @id @default(uuid())
  url      String
  case     CaseApplication @relation(fields: [caseId], references: [id])
  caseId   String
}

model CaseApplication{
  id       String   @id @default(uuid())
  name     String
  phone    String
  address  String
  evidence Evidence[]
  document String?
  status   ApplicationStatus   @default(PENDING)
}
model Alert{
  id       String   @id @default(uuid())
  latitude Float
  longitude Float
  agency   Account? @relation(fields: [agencyId], references: [id])
  agencyId String
  status   ApplicationStatus   @default(PENDING)
}
model Event{
  id       String   @id @default(uuid())
  name     String
  location String
  date     DateTime
  description String
}

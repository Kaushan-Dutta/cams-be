// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  AGENCY
}

enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum MessageType {
  PERSONAL
  BROADCAST
}

enum CaseStatus {
  PENDING
  CASE_ASSIGNED
  PROGRESS
  REJECTED
}

enum CaseType {
  CYBER
  MISSING
  KIDNAPPING
  TRAFFICKING
  ACCIDENT
  OTHER
}


model Account {
  id               String            @id @default(uuid())
  email            String            @unique
  password         String
  role             Role              @default(USER)
  agency           Agency?
  location         Location?
  NotificationRecv Notification[]    @relation("ReceivedNotifications")
  NotificationSent Notification[]    @relation("SentNotifications")
  alert            Alert[]
  cases            CaseApplication[] 
  caseAgencyMap    CaseAgencyMap[]
  @@map("accounts")
}
model Agency {
  id          String            @id @default(uuid())
  name        String
  phone       String
  pincode     String
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  account     Account           @relation(fields: [accountId], references: [id])
  accountId   String            @unique
 
  @@map("agencies")
}

model Location {
  id        String  @id @default(uuid())
  longitude Float
  latitude  Float
  account   Account @relation(fields: [accountId], references: [id])
  accountId String  @unique

  @@map("locations")
}

model AgencyApplication {
  id        String            @id @default(uuid())
  email     String
  name      String
  phone     String
  pincode   String            @unique
  document  String
  longitude Float
  latitude  Float
  status    ApplicationStatus @default(PENDING)

  @@map("agency_applications")
}

model Notification {
  id         String      @id @default(uuid())
  title      String
  message    String
  createdAt  DateTime    @default(now())
  type       MessageType
  sender     Account     @relation("SentNotifications", fields: [senderId], references: [id])
  senderId   String
  receiver   Account?    @relation("ReceivedNotifications", fields: [receiverId], references: [id])
  receiverId String

  @@map("notifications")
}

model Evidence {
  id          String          @id @default(uuid())
  url         String?
  file        String?
  description String
  case        CaseApplication @relation(fields: [caseId], references: [id])
  caseId      String

  @@map("evidences")
}


model CaseApplication {
  id        String            @id @default(uuid())
  type      CaseType
  name      String
  phone     String
  pincode   String
  evidence  Evidence[]
  document  String?
  status    ApplicationStatus @default(PENDING)
  account   Account           @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId String            
  createdAt DateTime          @default(now())
 
  caseAgencyMap CaseAgencyMap[]
  @@map("cases")
}
model CaseAgencyMap {
  id       String          @id @default(uuid())
  case      CaseApplication @relation(fields: [caseId], references: [id])
  caseId    String
  agency    Account          @relation(fields: [agencyId], references: [id])
  agencyId  String

  @@map("case_agency_maps")

}
model Alert {
  id        String            @id @default(uuid())
  latitude  Float
  longitude Float
  agency    Account?          @relation(fields: [agencyId], references: [id])
  agencyId  String
  status    ApplicationStatus @default(PENDING)
  createdAt DateTime          @default(now())

  @@map("alerts")
}

model Event {
  id          String   @id @default(uuid())
  name        String
  location    String
  date        String
  description String

  @@map("events")
}

model UserIdentityCard {
  id       String            @id @default(uuid())
  name     String
  phone    String
  pincode  String
  document String
  profile  String
  status   ApplicationStatus @default(PENDING)

  @@map("user_identity_cards")
}
